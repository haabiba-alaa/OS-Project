void free_user_mem(struct Env* e, uint32 virtual_address, uint32 size)
{
	/*==========================================================================*/
	//TODO: [PROJECT'23.MS2 - #12] [2] USER HEAP - free_user_mem() [Kernel Side]
	/*REMOVE THESE LINES BEFORE START CODING */
	//inctst();
	//return;
	/*==========================================================================*/

	// Write your code here, remove the panic and write your code
	//panic("free_user_mem() is not implemented yet...!!");

	//TODO: [PROJECT'23.MS2 - BONUS#2] [2] USER HEAP - free_user_mem() IN O(1): removing page from WS List instead of searching the entire list
		 /* if (e == NULL || e->env_page_directory == NULL) {
		        return;
		    }*/

		    // Get the virtual address of the page directory
		    uint32* va_page_directory = e->env_page_directory;
		    uint32 va= (uint32)(ROUNDDOWN(virtual_address,PAGE_SIZE));
		    size = ROUNDUP(size, PAGE_SIZE);
		    unsigned int Last;
		    int in_The_Mid=1;
		    //Case 1 : Removes Last Element

			//Case 1.A Last is Tail
//			if(e->page_last_WS_element!=NULL){
//				if(e->page_last_WS_element->prev_next_info.le_next==NULL){
//					cprintf("FREE_USER_MEM: Case 1.A\n");
//					e->page_last_WS_element=LIST_FIRST(&e->page_WS_list);
//				}
//				else if(e->page_last_WS_element->prev_next_info.le_prev==NULL){
//					cprintf("FREE_USER_MEM: Case 1.B\n");
//					e->page_last_WS_element=LIST_FIRST(&e->page_WS_list)->prev_next_info.le_next;
//				}
//				else{
//
//					in_The_Mid=1;
//				}
//		}
		    // Iterate over the range of virtual addresses and allocate pages
		    for (uint32 current_va = va; current_va < va + size; current_va += PAGE_SIZE) {
		        // Check if the page table for this virtual address exists
		        /*uint32* ptr_page_table = NULL;
		        int ret= get_page_table(va_page_directory,current_va,&ptr_page_table);

		        // If the page table is not in memory, create a new one
		        if (ret == TABLE_NOT_EXIST || ptr_page_table == NULL) {
					return;
				}*/
		    	int ret=pt_get_page_permissions(e->env_page_directory,current_va);

                pt_set_page_permissions(va_page_directory,current_va,0,(PERM_PRESENT|PERM_WRITEABLE|PERM_USER));
                if(ret&PERM_PRESENT){
					unmap_frame(va_page_directory,current_va);
					pt_clear_page_table_entry(va_page_directory,current_va);

					env_page_ws_invalidate(e,current_va);

					if(in_The_Mid==1){
						e->page_last_WS_element=NULL;
						in_The_Mid=0;
					}
                }

		    }
//		    Last=va + size;
//		    if(e->page_last_WS_element!=NULL){
//				if(in_The_Mid==1){
//					e->page_last_WS_element->virtual_address= Last;
//					struct WorkingSetElement *ptr_WS_element = NULL;
//					LIST_FOREACH(ptr_WS_element, &(e->page_WS_list)){
//					if(ROUNDDOWN(ptr_WS_element->virtual_address,PAGE_SIZE) == ROUNDDOWN(va,PAGE_SIZE)){
//						cprintf("Free_USER \n");
//						return;
//					}
//					struct WorkingSetElement *temp=LIST_FIRST(&e->page_WS_list);
//					LIST_REMOVE(&e->page_WS_list,temp);
//					LIST_INSERT_TAIL(&e->page_WS_list,temp);
//					}
//				}
//				else{//Case 2.B
//				   if(e->page_last_WS_element->prev_next_info.le_next==NULL){
//
//						struct WorkingSetElement *ptr_WS_element = NULL;
//						LIST_FOREACH(ptr_WS_element, &(e->page_WS_list)){
//						if(ROUNDDOWN(ptr_WS_element->virtual_address,PAGE_SIZE) == ROUNDDOWN(e->page_last_WS_element->virtual_address,PAGE_SIZE)){
//							cprintf("Free_USER \n");
//							return;
//						}
//						struct WorkingSetElement *temp=LIST_FIRST(&e->page_WS_list);
//						LIST_REMOVE(&e->page_WS_list,temp);
//						LIST_INSERT_TAIL(&e->page_WS_list,temp);
//					}
//				   }//Case 2.C
//					else if((e->page_last_WS_element->prev_next_info.le_next != NULL) && (e->page_last_WS_element->prev_next_info.le_prev !=NULL)){
//						struct WorkingSetElement *ptr_WS_element = NULL;
//						LIST_FOREACH(ptr_WS_element, &(e->page_WS_list)){
//						if(ROUNDDOWN(ptr_WS_element->virtual_address,PAGE_SIZE) == ROUNDDOWN(e->page_last_WS_element->virtual_address,PAGE_SIZE)){
//							cprintf("Free_USER \n");
//							return;
//						}
//						struct WorkingSetElement *temp=LIST_FIRST(&e->page_WS_list);
//						LIST_REMOVE(&e->page_WS_list,temp);
//						LIST_INSERT_TAIL(&e->page_WS_list,temp);
//						}
//
//					}
//				}
//		    }
		    return;
}