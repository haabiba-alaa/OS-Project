void free_user_mem(struct Env* e, uint32 virtual_address, uint32 size)
{
	/==========================================================================/
	//TODO: [PROJECT'23.MS2 - #12] [2] USER HEAP - free_user_mem() [Kernel Side]
	/*REMOVE THESE LINES BEFORE START CODING */
	//inctst();
	//return;
	/==========================================================================/

	// Write your code here, remove the panic and write your code
	//panic("free_user_mem() is not implemented yet...!!");

	//TODO: [PROJECT'23.MS2 - BONUS#2] [2] USER HEAP - free_user_mem() IN O(1): removing page from WS List instead of searching the entire list
	cprintf("free_user: program enters the function");
		  if (e == NULL || e->env_page_directory == NULL) {
		        return;
		    }

		    // Get the virtual address of the page directory
		    uint32* va_page_directory = e->env_page_directory;
		    uint32 va= (uint32)(ROUNDDOWN(virtual_address,PAGE_SIZE));
		    size = ROUNDUP(size, PAGE_SIZE);
		    // Iterate over the range of virtual addresses and allocate pages
		    for (uint32 current_va = va; current_va < va + size; current_va += PAGE_SIZE) {
		        // Check if the page table for this virtual address exists
		        uint32* ptr_page_table = NULL;
		        int ret= get_page_table(va_page_directory,current_va,&ptr_page_table);

		        // If the page table is not in memory, create a new one
		        if (ret==TABLE_NOT_EXIST) {
		        	ptr_page_table = create_page_table(va_page_directory,current_va);
		        }

		        pf_remove_env_page(e,USER_HEAP_START);


		    }
		    return;
}
