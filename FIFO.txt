/*
 * fault_handler.c
 *
 *  Created on: Oct 12, 2022
 *      Author: HP
 */

#include "trap.h"
#include <kern/proc/user_environment.h>
#include "../cpu/sched.h"
#include "../disk/pagefile_manager.h"
#include "../mem/memory_manager.h"

//2014 Test Free(): Set it to bypass the PAGE FAULT on an instruction with this length and continue executing the next one
// 0 means don't bypass the PAGE FAULT
uint8 bypassInstrLength = 0;

//===============================
// REPLACEMENT STRATEGIES
//===============================
//2020
void setPageReplacmentAlgorithmLRU(int LRU_TYPE)
{
	assert(LRU_TYPE == PG_REP_LRU_TIME_APPROX || LRU_TYPE == PG_REP_LRU_LISTS_APPROX);
	_PageRepAlgoType = LRU_TYPE ;
}
void setPageReplacmentAlgorithmCLOCK(){_PageRepAlgoType = PG_REP_CLOCK;}
void setPageReplacmentAlgorithmFIFO(){_PageRepAlgoType = PG_REP_FIFO;}
void setPageReplacmentAlgorithmModifiedCLOCK(){_PageRepAlgoType = PG_REP_MODIFIEDCLOCK;}
/*2018*/ void setPageReplacmentAlgorithmDynamicLocal(){_PageRepAlgoType = PG_REP_DYNAMIC_LOCAL;}
/*2021*/ void setPageReplacmentAlgorithmNchanceCLOCK(int PageWSMaxSweeps){_PageRepAlgoType = PG_REP_NchanceCLOCK;  page_WS_max_sweeps = PageWSMaxSweeps;}

//2020
uint32 isPageReplacmentAlgorithmLRU(int LRU_TYPE){return _PageRepAlgoType == LRU_TYPE ? 1 : 0;}
uint32 isPageReplacmentAlgorithmCLOCK(){if(_PageRepAlgoType == PG_REP_CLOCK) return 1; return 0;}
uint32 isPageReplacmentAlgorithmFIFO(){if(_PageRepAlgoType == PG_REP_FIFO) return 1; return 0;}
uint32 isPageReplacmentAlgorithmModifiedCLOCK(){if(_PageRepAlgoType == PG_REP_MODIFIEDCLOCK) return 1; return 0;}
/*2018*/ uint32 isPageReplacmentAlgorithmDynamicLocal(){if(_PageRepAlgoType == PG_REP_DYNAMIC_LOCAL) return 1; return 0;}
/*2021*/ uint32 isPageReplacmentAlgorithmNchanceCLOCK(){if(_PageRepAlgoType == PG_REP_NchanceCLOCK) return 1; return 0;}

//===============================
// PAGE BUFFERING
//===============================
void enableModifiedBuffer(uint32 enableIt){_EnableModifiedBuffer = enableIt;}
uint8 isModifiedBufferEnabled(){  return _EnableModifiedBuffer ; }

void enableBuffering(uint32 enableIt){_EnableBuffering = enableIt;}
uint8 isBufferingEnabled(){  return _EnableBuffering ; }

void setModifiedBufferLength(uint32 length) { _ModifiedBufferLength = length;}
uint32 getModifiedBufferLength() { return _ModifiedBufferLength;}

//===============================
// FAULT HANDLERS
//===============================

//Handle the table fault
void table_fault_handler(struct Env * curenv, uint32 fault_va)
{
	//panic("table_fault_handler() is not implemented yet...!!");
	//Check if it's a stack page
	uint32* ptr_table;
#if USE_KHEAP
	{
		ptr_table = create_page_table(curenv->env_page_directory, (uint32)fault_va);
	}
#else
	{
		__static_cpt(curenv->env_page_directory, (uint32)fault_va, &ptr_table);
	}
#endif
}

//Handle the page fault

//void page_fault_handler(struct Env * curenv, uint32 fault_va)
//{
//#if USE_KHEAP
//		struct WorkingSetElement *victimWSElement = NULL;
//		uint32 wsSize = LIST_SIZE(&(curenv->page_WS_list));
//#else
//		int iWS =curenv->page_last_WS_index;
//		uint32 wsSize = env_page_ws_get_size(curenv);
//#endif
//
////		if(wsSize < (curenv->page_WS_max_size))
////	   {
////			//cprintf("PLACEMENT=========================WS Size = %d\n", wsSize );
////			//TODO: [PROJECT'23.MS2 - #15] [3] PAGE FAULT HANDLER - Placement
////			// Write your code here, remove the panic and write your code
////			//panic("page_fault_handler().PLACEMENT is not implemented yet...!!");
////			//refer to the project presentation and documentation for details
////			 struct FrameInfo *ptr_frameInfo = NULL ;
////			 int alloc = allocate_frame(&ptr_frameInfo);
////			 if(alloc == 0){  //!= E_NO_MEM
////				map_frame(curenv->env_page_directory ,ptr_frameInfo , fault_va,(PERM_PRESENT | PERM_USER | PERM_WRITEABLE));
////				alloc = pf_read_env_page(curenv,(void *)fault_va);
////				if (alloc == E_PAGE_NOT_EXIST_IN_PF){
////				 // CHECK if it is a stack or heap page
////
////					if ((fault_va < USTACKTOP && fault_va >= USTACKBOTTOM) || (fault_va < USER_HEAP_MAX  && fault_va >= USER_HEAP_START)){
////						//pf_add_empty_env_page(curenv,fault_va,0);
////					}
////					else{
////						//panic("invaild access %x",fault_va);
////						sched_kill_env(curenv->env_id);
////					}
////
////			 }
////
////				struct WorkingSetElement* ws_new_ele = env_page_ws_list_create_element( curenv, fault_va);
////				LIST_INSERT_TAIL(&curenv->page_WS_list,ws_new_ele);
////				uint32 size=LIST_SIZE(&curenv->page_WS_list);
////				if(curenv->page_WS_max_size == size){
////					curenv->page_last_WS_element=LIST_FIRST(&curenv->page_WS_list);
////				}
////				else{
////					curenv->page_last_WS_element=NULL;
////				}
////			 }
////	}
//
//		//cprintf("REPLACEMENT=========================WS Size = %d\n", wsSize );
//		//refer to the project presentation and documentation for details
////		if(isPageReplacmentAlgorithmFIFO())
////		{
////			cprintf("FIFO: Enters the function\n");
////			//TODO: [PROJECT'23.MS3 - #1] [1] PAGE FAULT HANDLER - FIFO Replacement
////			// Write your code here, remove the panic and write your code
////			//panic("page_fault_handler() FIFO Replacement is not implemented yet...!!");
////			if(wsSize < (curenv->page_WS_max_size))
////			{
////				//cprintf("PLACEMENT=========================WS Size = %d\n", wsSize );
////				//TODO: [PROJECT'23.MS2 - #15] [3] PAGE FAULT HANDLER - Placement
////				// Write your code here, remove the panic and write your code
////				//panic("page_fault_handler().PLACEMENT is not implemented yet...!!");
////				//refer to the project presentation and documentation for details
////				 struct FrameInfo *ptr_frameInfo = NULL ;
////				 int alloc = allocate_frame(&ptr_frameInfo);
////				 if(alloc == 0){  //!= E_NO_MEM
////					map_frame(curenv->env_page_directory ,ptr_frameInfo , fault_va,(PERM_PRESENT | PERM_USER | PERM_WRITEABLE));
////					alloc = pf_read_env_page(curenv,(void *)fault_va);
////					if (alloc == E_PAGE_NOT_EXIST_IN_PF){
////					 // CHECK if it is a stack or heap page
////
////						if ((fault_va < USTACKTOP && fault_va >= USTACKBOTTOM) || (fault_va < USER_HEAP_MAX  && fault_va >= USER_HEAP_START)){
////							//pf_add_empty_env_page(curenv,fault_va,0);
////						}
////						else{
////							//panic("invaild access %x",fault_va);
////							sched_kill_env(curenv->env_id);
////						}
////
////				 }
////
////				struct WorkingSetElement* ws_new_ele = env_page_ws_list_create_element( curenv, fault_va);
////				LIST_INSERT_TAIL(&curenv->page_WS_list,ws_new_ele);
////				uint32 size=LIST_SIZE(&curenv->page_WS_list);
////				if(curenv->page_WS_max_size == size){
////					curenv->page_last_WS_element=LIST_FIRST(&curenv->page_WS_list);
////				}
////				else{
////					curenv->page_last_WS_element=NULL;
////				}
////			 }
////				}
////		}
//		if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX)){
//			 cprintf("LRU: Enter the function\n");
////			 struct FrameInfo *ptr_frameInfo = NULL ;
////			 int alloc = allocate_frame(&ptr_frameInfo);
////			 if(alloc == 0){  //!= E_NO_MEM
////				map_frame(curenv->env_page_directory ,ptr_frameInfo , fault_va,(PERM_PRESENT | PERM_USER | PERM_WRITEABLE));
////				alloc = pf_read_env_page(curenv,(void *)fault_va);
////				if (alloc == E_PAGE_NOT_EXIST_IN_PF){
////				 // CHECK if it is a stack or heap page
////
////					if ((fault_va < USTACKTOP && fault_va >= USTACKBOTTOM) || (fault_va < USER_HEAP_MAX  && fault_va >= USER_HEAP_START)){
////						//pf_add_empty_env_page(curenv,fault_va,0);
////					}
////					else{
////						//panic("invaild access %x",fault_va);
////						sched_kill_env(curenv->env_id);
////					}
////
////			}
//			uint32 ActiveCurrSize=LIST_SIZE(&curenv->ActiveList);
//			uint32 SecondCurrSize=LIST_SIZE(&curenv->SecondList);
//			if(SecondCurrSize < (uint32)curenv->SecondListSize /*(ActiveCurrSize+SecondCurrSize) < (curenv->ActiveListSize+curenv->SecondListSize)*/){
//				//LRU Placement
//				if(ActiveCurrSize==0){
//					cprintf("LRU: ActiveCurrSize==0\n");
//					struct WorkingSetElement* ws_new_ele = env_page_ws_list_create_element( curenv, fault_va);
//					LIST_INSERT_HEAD(&curenv->ActiveList,ws_new_ele);
//					pt_set_page_permissions(curenv->env_page_directory,fault_va,PERM_PRESENT,0);
//					return;
//				}
//				else{//case 1 : present in Ac
//					int found=0;
//					struct WorkingSetElement *ptr_WS_element = NULL;
//
//					if(found==0 && ActiveCurrSize <curenv->ActiveListSize){//Not Present in AC & Ac_Size<Max
//						cprintf("LRU: ActiveCurrSize:%d ,AC MAX size: %d\n",ActiveCurrSize,curenv->ActiveListSize);
//						struct WorkingSetElement* ws_new_ele = env_page_ws_list_create_element( curenv, fault_va);
//						LIST_INSERT_HEAD(&curenv->ActiveList,ws_new_ele);
//						pt_set_page_permissions(curenv->env_page_directory,fault_va,PERM_PRESENT,0);
//						found=1;
//						return;
//					}
//					else if(found == 0 && ActiveCurrSize == curenv->ActiveListSize){//Not Present in AC & Ac_Size=Max
//						//A- Found in sec
//						if(SecondCurrSize!=0){
//							cprintf("LRU: Ac is Full\n");
//							struct WorkingSetElement *ptr_WS_element = NULL;
//							LIST_FOREACH(ptr_WS_element, &(curenv->SecondList)){
//								if(ROUNDDOWN(ptr_WS_element->virtual_address,PAGE_SIZE) == ROUNDDOWN(fault_va,PAGE_SIZE))
//								{
//									LIST_REMOVE(&curenv->SecondList,ptr_WS_element);
//									struct WorkingSetElement * temp_element = LIST_LAST(&curenv->ActiveList);
//									pt_set_page_permissions(curenv->env_page_directory,temp_element->virtual_address,0,PERM_PRESENT);
//									LIST_REMOVE(&curenv->ActiveList,temp_element);
//									LIST_INSERT_HEAD(&curenv->SecondList,temp_element);
//									LIST_INSERT_HEAD(&curenv->ActiveList,ptr_WS_element);
//									pt_set_page_permissions(curenv->env_page_directory,fault_va,PERM_PRESENT,0);
//									found=1;
//									return;// for now
//
//								}
//							}
//							if(found==0){
//								cprintf("LRU: Ac is full & NOT found in Sec\n");
//								struct WorkingSetElement* ws_new_ele = env_page_ws_list_create_element( curenv, fault_va);
//								struct WorkingSetElement * temp_element = LIST_LAST(&curenv->ActiveList);
//								LIST_INSERT_HEAD(&curenv->SecondList,temp_element);
//								pt_set_page_permissions(curenv->env_page_directory,temp_element->virtual_address,0,PERM_PRESENT);
//								LIST_REMOVE(&curenv->ActiveList,temp_element);
//								LIST_INSERT_HEAD(&curenv->ActiveList,ws_new_ele);
//								pt_set_page_permissions(curenv->env_page_directory,fault_va,PERM_PRESENT,0);
//								found=1;
//								return;
//							}
//						}
//						else{
//							cprintf("LRU: Ac is full & Sec is Empty\n");
//							struct WorkingSetElement* ws_new_ele = env_page_ws_list_create_element( curenv, fault_va);
//							struct WorkingSetElement * temp_element = LIST_LAST(&curenv->ActiveList);
//							LIST_INSERT_HEAD(&(curenv->SecondList),temp_element);
//							pt_set_page_permissions(curenv->env_page_directory,temp_element->virtual_address,0,PERM_PRESENT);
//							LIST_REMOVE(&(curenv->ActiveList),temp_element);
//							LIST_INSERT_HEAD(&(curenv->ActiveList),ws_new_ele);
//							pt_set_page_permissions(curenv->env_page_directory,fault_va,PERM_PRESENT,0);
//							found=1;
//							return;
//						}
//
//					}
//
//				}
//			}
//			else if(SecondCurrSize == curenv->SecondListSize){
//					int found=0;
//					struct WorkingSetElement *ptr_WS_element = NULL;
//					LIST_FOREACH(ptr_WS_element, &(curenv->ActiveList)){
//						if(ROUNDDOWN(ptr_WS_element->virtual_address,PAGE_SIZE) == ROUNDDOWN(fault_va,PAGE_SIZE))
//						{
//							LIST_REMOVE((&curenv->ActiveList),ptr_WS_element);
//							LIST_INSERT_HEAD(&(curenv->ActiveList),ptr_WS_element);
//							found=1;
//							return;// for now
//
//						}
//					}
//					if(found==0){
//						LIST_FOREACH(ptr_WS_element, &(curenv->SecondList)){
//							if(ROUNDDOWN(ptr_WS_element->virtual_address,PAGE_SIZE) == ROUNDDOWN(fault_va,PAGE_SIZE))
//							{
//								LIST_REMOVE(&curenv->SecondList,ptr_WS_element);
//								LIST_INSERT_HEAD(&curenv->SecondList,ptr_WS_element);
//								found=1;
//								return;// for now
//
//							}
//						}
//					}
//					if(found ==0){
//						struct WorkingSetElement* ws_new_ele = env_page_ws_list_create_element( curenv, fault_va);
//						//victim element and write it on disk
//						victimWSElement=(LIST_LAST(&curenv->SecondList));
//						//write code of writing on the disk
//						LIST_INSERT_TAIL(&curenv->page_WS_list,victimWSElement);//for now
//						LIST_REMOVE(&curenv->SecondList,victimWSElement);
//						LIST_INSERT_HEAD(&curenv->SecondList,LIST_LAST(&curenv->ActiveList));
//						LIST_REMOVE(&curenv->ActiveList,LIST_LAST(&curenv->ActiveList));
//						LIST_INSERT_HEAD(&curenv->ActiveList,ws_new_ele);
//
//					}
//
//				}
//
//			 }
//			}
//}
void page_fault_handler(struct Env * curenv, uint32 fault_va)
{
#if USE_KHEAP
		struct WorkingSetElement *victimWSElement = NULL;
		uint32 wsSize = LIST_SIZE(&(curenv->page_WS_list));
#else
		int iWS =curenv->page_last_WS_index;
		uint32 wsSize = env_page_ws_get_size(curenv);
#endif

//		cprintf("REPLACEMENT=========================WS Size = %d\n", wsSize );
//		refer to the project presentation and documentation for details
		if(isPageReplacmentAlgorithmFIFO())
		{
			//TODO: [PROJECT'23.MS3 - #1] [1] PAGE FAULT HANDLER - FIFO Replacement
			// Write your code here, remove the panic and write your code
			//panic("page_fault_handler() FIFO Replacement is not implemented yet...!!");
			if(wsSize < (curenv->page_WS_max_size))
				   {
						//cprintf("PLACEMENT=========================WS Size = %d\n", wsSize );
						//TODO: [PROJECT'23.MS2 - #15] [3] PAGE FAULT HANDLER - Placement
						// Write your code here, remove the panic and write your code
						//panic("page_fault_handler().PLACEMENT is not implemented yet...!!");
						//refer to the project presentation and documentation for details
						 struct FrameInfo *ptr_frameInfo = NULL ;
						 int alloc = allocate_frame(&ptr_frameInfo);
						 if(alloc == 0){  //!= E_NO_MEM
							map_frame(curenv->env_page_directory ,ptr_frameInfo , fault_va,(PERM_PRESENT | PERM_USER | PERM_WRITEABLE));
							alloc = pf_read_env_page(curenv,(void *)fault_va);
							if (alloc == E_PAGE_NOT_EXIST_IN_PF){
							 // CHECK if it is a stack or heap page

								if ((fault_va < USTACKTOP && fault_va >= USTACKBOTTOM) || (fault_va < USER_HEAP_MAX  && fault_va >= USER_HEAP_START)){
									//pf_add_empty_env_page(curenv,fault_va,0);
								}
								else{
									//panic("invaild access %x",fault_va);
									sched_kill_env(curenv->env_id);
								}

						 }

							struct WorkingSetElement* ws_new_ele = env_page_ws_list_create_element( curenv, fault_va);
							LIST_INSERT_TAIL(&curenv->page_WS_list,ws_new_ele);
							uint32 size=LIST_SIZE(&curenv->page_WS_list);
							if(curenv->page_WS_max_size == size){
								curenv->page_last_WS_element=LIST_FIRST(&curenv->page_WS_list);
							}
							else{
								curenv->page_last_WS_element=NULL;
							}
						 }
				}
			//Replacement FIFO
			else{
				struct FrameInfo *ptr_frameInfo = NULL ;
				 int alloc = allocate_frame(&ptr_frameInfo);
				 if(alloc == 0){  //!= E_NO_MEM
					map_frame(curenv->env_page_directory ,ptr_frameInfo , fault_va,(PERM_PRESENT | PERM_USER | PERM_WRITEABLE));
					alloc = pf_read_env_page(curenv,(void *)fault_va);
					if (alloc == E_PAGE_NOT_EXIST_IN_PF){
					 // CHECK if it is a stack or heap page

						if ((fault_va < USTACKTOP && fault_va >= USTACKBOTTOM) || (fault_va < USER_HEAP_MAX  && fault_va >= USER_HEAP_START)){
							//pf_add_empty_env_page(curenv,fault_va,0);
						}
						else{
							//panic("invaild access %x",fault_va);
							sched_kill_env(curenv->env_id);
						}
					}
						struct WorkingSetElement* ws_new_ele = env_page_ws_list_create_element( curenv, fault_va);
						//Removing First Element
						struct WorkingSetElement * victim_ele = curenv->page_last_WS_element;

						uint32 page_permissions=pt_get_page_permissions(curenv->env_page_directory,victim_ele->virtual_address);
						if(page_permissions & PERM_MODIFIED){
							uint32* ptr_page_table=NULL;
							get_page_table(curenv->env_page_directory,victim_ele->virtual_address,&ptr_page_table);
							struct FrameInfo *ptr_frameInfo = get_frame_info(curenv->env_page_directory,victim_ele->virtual_address,&ptr_page_table);
							pf_update_env_page(curenv,victim_ele->virtual_address,ptr_frameInfo);

						}

						unmap_frame(curenv->env_page_directory,victim_ele->virtual_address);

						//Case Last was the tail
						if(victim_ele->prev_next_info.le_next==NULL){
							LIST_REMOVE(&curenv->page_WS_list,victim_ele);
							LIST_INSERT_TAIL(&curenv->page_WS_list,ws_new_ele);
							curenv->page_last_WS_element=LIST_FIRST(&curenv->page_WS_list);
						}
						else if(victim_ele->prev_next_info.le_prev==NULL){ //Case Last was the Head
							LIST_REMOVE(&curenv->page_WS_list,victim_ele);
							LIST_INSERT_HEAD(&curenv->page_WS_list,ws_new_ele);
							curenv->page_last_WS_element=LIST_FIRST(&curenv->page_WS_list)->prev_next_info.le_next;

						}
						else if(victim_ele->prev_next_info.le_prev!=NULL && victim_ele->prev_next_info.le_next!=NULL){
							struct WorkingSetElement * temp = curenv->page_last_WS_element->prev_next_info.le_prev;
							LIST_REMOVE(&curenv->page_WS_list,victim_ele);
							LIST_INSERT_AFTER(&curenv->page_WS_list,temp,ws_new_ele);
							curenv->page_last_WS_element=ws_new_ele->prev_next_info.le_next;

						}

			}
		}
		}
		if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX)){
					uint32 ActiveCurrSize=LIST_SIZE(&curenv->ActiveList);
					uint32 SecondCurrSize=LIST_SIZE(&curenv->SecondList);
					if((ActiveCurrSize+SecondCurrSize) < (curenv->ActiveListSize+curenv->SecondListSize)){
						if(ActiveCurrSize < curenv->ActiveListSize){//Case 1 AC < Max
							cprintf("LRU: ActiveCurrSize:%d ,AC MAX size: %d\n",ActiveCurrSize,curenv->ActiveListSize);
							struct FrameInfo *ptr_frameInfo = NULL ;
							int alloc = allocate_frame(&ptr_frameInfo);
							if(alloc == 0){  //!= E_NO_MEM
								map_frame(curenv->env_page_directory ,ptr_frameInfo , fault_va,(PERM_PRESENT | PERM_USER | PERM_WRITEABLE));
								alloc = pf_read_env_page(curenv,(void *)fault_va);
								if (alloc == E_PAGE_NOT_EXIST_IN_PF){
								 // CHECK if it is a stack or heap page

									if ((fault_va < USTACKTOP && fault_va >= USTACKBOTTOM) || (fault_va < USER_HEAP_MAX  && fault_va >= USER_HEAP_START)){
										//pf_add_empty_env_page(curenv,fault_va,0);
									}
									else{
										//panic("invaild access %x",fault_va);
										sched_kill_env(curenv->env_id);
									}
								}

							}
							struct WorkingSetElement* ws_new_ele = env_page_ws_list_create_element( curenv, fault_va);
							LIST_INSERT_HEAD(&curenv->ActiveList,ws_new_ele);
							pt_set_page_permissions(curenv->env_page_directory,fault_va,PERM_PRESENT,0);
							return;
						}
						else{//Case 2 Ac==Max
							//case 2.A Present in Sec
							struct WorkingSetElement *ptr_WS_element = NULL;
							LIST_FOREACH(ptr_WS_element, &(curenv->SecondList)){
								if(ROUNDDOWN(ptr_WS_element->virtual_address,PAGE_SIZE) == ROUNDDOWN(fault_va,PAGE_SIZE))
								{

									struct WorkingSetElement * temp_element = LIST_LAST(&curenv->ActiveList);
									LIST_REMOVE(&curenv->ActiveList,temp_element);
									LIST_INSERT_HEAD(&curenv->SecondList,temp_element);
									pt_set_page_permissions(curenv->env_page_directory,temp_element->virtual_address,0,PERM_PRESENT);
									LIST_REMOVE(&curenv->SecondList,ptr_WS_element);
									LIST_INSERT_HEAD(&curenv->ActiveList,ptr_WS_element);
									pt_set_page_permissions(curenv->env_page_directory,fault_va,PERM_PRESENT,0);
									return;// for now

								}
						   }
							//Case 2.B NOT found in Sec
							struct FrameInfo *ptr_frameInfo = NULL ;
							int alloc = allocate_frame(&ptr_frameInfo);
							if(alloc == 0){  //!= E_NO_MEM
								map_frame(curenv->env_page_directory ,ptr_frameInfo , fault_va,(PERM_PRESENT | PERM_USER | PERM_WRITEABLE));
								alloc = pf_read_env_page(curenv,(void *)fault_va);
								if (alloc == E_PAGE_NOT_EXIST_IN_PF){
								 // CHECK if it is a stack or heap page

									if ((fault_va < USTACKTOP && fault_va >= USTACKBOTTOM) || (fault_va < USER_HEAP_MAX  && fault_va >= USER_HEAP_START)){
										//pf_add_empty_env_page(curenv,fault_va,0);
									}
									else{
										//panic("invaild access %x",fault_va);
										sched_kill_env(curenv->env_id);
									}
								}

							}
							struct WorkingSetElement* ws_new_ele = env_page_ws_list_create_element( curenv, fault_va);
							struct WorkingSetElement * temp_element = LIST_LAST(&curenv->ActiveList);
							LIST_REMOVE(&(curenv->ActiveList),temp_element);
							LIST_INSERT_HEAD(&(curenv->SecondList),temp_element);
							pt_set_page_permissions(curenv->env_page_directory,temp_element->virtual_address,0,PERM_PRESENT);
							LIST_INSERT_HEAD(&(curenv->ActiveList),ws_new_ele);
							pt_set_page_permissions(curenv->env_page_directory,fault_va,PERM_PRESENT,0);
							return;

					   }
					}
					else{
						//Replacemet LRU
						struct WorkingSetElement *ptr_WS_element = NULL;
						//cprintf("LRU: Replacement LRU\n");
						LIST_FOREACH(ptr_WS_element, &(curenv->SecondList)){
							if(ROUNDDOWN(ptr_WS_element->virtual_address,PAGE_SIZE) == ROUNDDOWN(fault_va,PAGE_SIZE))
							{
								struct WorkingSetElement * temp_element = LIST_LAST(&curenv->ActiveList);
								LIST_REMOVE(&curenv->ActiveList,temp_element);
								LIST_REMOVE(&curenv->SecondList,ptr_WS_element);
								LIST_INSERT_HEAD(&curenv->ActiveList,ptr_WS_element);
								pt_set_page_permissions(curenv->env_page_directory,fault_va,PERM_PRESENT,0);
								LIST_INSERT_HEAD(&curenv->SecondList,temp_element);
								pt_set_page_permissions(curenv->env_page_directory,temp_element->virtual_address,0,PERM_PRESENT);
								return;// for now
							}
						}
						struct WorkingSetElement* ws_new_ele = env_page_ws_list_create_element( curenv, fault_va);
						//victim element and write it on disk
						struct WorkingSetElement * vic_element = LIST_LAST(&curenv->SecondList);
						struct WorkingSetElement * temp_element = LIST_LAST(&curenv->ActiveList);
						//write code of writing on the disk
						struct FrameInfo *ptr_frameInfo = NULL ;
						int alloc = allocate_frame(&ptr_frameInfo);
						if(alloc == 0){  //!= E_NO_MEM
							map_frame(curenv->env_page_directory ,ptr_frameInfo , fault_va,(PERM_PRESENT | PERM_USER | PERM_WRITEABLE));
							alloc = pf_read_env_page(curenv,(void *)fault_va);
							if (alloc == E_PAGE_NOT_EXIST_IN_PF){
							 // CHECK if it is a stack or heap page

								if ((fault_va < USTACKTOP && fault_va >= USTACKBOTTOM) || (fault_va < USER_HEAP_MAX  && fault_va >= USER_HEAP_START)){
									//pf_add_empty_env_page(curenv,fault_va,0);
								}
								else{
									//panic("invaild access %x",fault_va);
									sched_kill_env(curenv->env_id);
								}
							}

						}
						uint32 page_permissions=pt_get_page_permissions(curenv->env_page_directory,vic_element->virtual_address);
						if(page_permissions & PERM_MODIFIED){
							uint32* ptr_page_table=NULL;
							get_page_table(curenv->env_page_directory,vic_element->virtual_address,&ptr_page_table);
							struct FrameInfo *ptr_frameInfo = get_frame_info(curenv->env_page_directory,vic_element->virtual_address,&ptr_page_table);
							pf_update_env_page(curenv,vic_element->virtual_address,ptr_frameInfo);

						}

						unmap_frame(curenv->env_page_directory,vic_element->virtual_address);
						LIST_REMOVE(&curenv->SecondList,vic_element);
						pt_set_page_permissions(curenv->env_page_directory,vic_element->virtual_address,0,PERM_PRESENT);
						LIST_REMOVE(&curenv->ActiveList,temp_element);
						LIST_INSERT_HEAD(&curenv->SecondList,temp_element);
						pt_set_page_permissions(curenv->env_page_directory,temp_element->virtual_address,0,PERM_PRESENT);
						LIST_INSERT_HEAD(&curenv->ActiveList,ws_new_ele);
						pt_set_page_permissions(curenv->env_page_directory,fault_va,PERM_PRESENT,0);
						return;
					}
			}

}
void __page_fault_handler_with_buffering(struct Env * curenv, uint32 fault_va)
{
	panic("this function is not required...!!");
}



