unsigned int kheap_physical_address(unsigned int virtual_address) {
	uint32 hard_limit = limit + PAGE_SIZE;
	uint32 va = (uint32)virtual_address;

   if (va >= KERNEL_HEAP_START && va <= limit){
      return va - start + limit;
   } else if (va >= hard_limit && va < KERNEL_HEAP_MAX) {
    	unsigned int* ptr_PT=NULL;
    	get_page_table(ptr_page_directory,va,&ptr_PT);
    	if(ptr_PT!=NULL){
        uint32 frameNO= va>>12;
        uint32 offset= va & 0x00000FFF;
        return (frameNO <<12)*PAGE_SIZE;
    	}
    	
    } else {
        // No mapping
        return 0;
   }
    return 0;
}


unsigned int kheap_physical_address(unsigned int virtual_address) {
	uint32 hard_limit = limit + PAGE_SIZE;
	uint32 va = (uint32)virtual_address;

   if (va >= KERNEL_HEAP_START && va <= limit){
     return va - start + limit;
   } else if (va >= hard_limit && va < KERNEL_HEAP_MAX) {
    uint32* ptr_PT=NULL;
    get_page_table(ptr_page_directory,va,&ptr_PT);
    if (ptr_PT !=NULL){
    return (unsigned int)((ptr_PT[PTX(va)>>12]*PAGE_SIZE)+ (va & 0x00000FFF));
    }
    else {
        // No mapping
      return 0;
    }
    return 0;
}



frame=get_frame_info(ptr_page_directory,va,&ptr_page_table);
	    if(frame!=NULL){
	    	unsigned int virt_addr=to_physical_address(frame);
	    	if(virt_addr==physical_address){
	    		return va;
	    	}
	    }
struct FrameInfo * get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table)
{
	// Fill this function in
	//cprintf(".gfi .1\n %x, %x, %x, \n", ptr_page_directory, virtual_address, ptr_page_table);
	uint32 ret =  get_page_table(ptr_page_directory, virtual_address, ptr_page_table) ;
	//cprintf(".gfi .15\n");
	if((*ptr_page_table) != 0)
	{
		uint32 index_page_table = PTX(virtual_address);
		//cprintf(".gfi .2\n");
		uint32 page_table_entry = (*ptr_page_table)[index_page_table];
		if( page_table_entry != 0)
		{
			//cprintf(".gfi .3\n");
			return to_frame_info( EXTRACT_ADDRESS ( page_table_entry ) );
		}
		return 0;
	}
	return 0;
}
