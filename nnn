
#include <inc/lib.h>

//==================================================================================//
//============================== GIVEN FUNCTIONS ===================================//
//==================================================================================//

//#define sizeofArr ((USER_HEAP_MAX - USER_HEAP_START) / PAGE_SIZE)
uint32 user_heap_pages_arr[NUM_OF_UHEAP_PAGES]={0};

int FirstTimeFlag = 1;
void InitializeUHeap()
{
	if(FirstTimeFlag)
	{
#if UHP_USE_BUDDY
		initialize_buddy();
		cprintf("BUDDY SYSTEM IS INITIALIZED\n");
#endif
		FirstTimeFlag = 0;
	}
}

//==================================================================================//
//============================ REQUIRED FUNCTIONS ==================================//
//==================================================================================//

//=============================================
// [1] CHANGE THE BREAK LIMIT OF THE USER HEAP:
//=============================================
/2023/
void* sbrk(int increment)
{
	return (void*) sys_sbrk(increment);
}

//=================================
// [2] ALLOCATE SPACE IN USER HEAP:
//=================================
void* malloc(uint32 size)
{
	cprintf("Enter malloc\n");
	//==============================================================
	//DON'T CHANGE THIS CODE========================================
	InitializeUHeap();
	if (size == 0) return NULL ;
	//==============================================================
	//TODO: [PROJECT'23.MS2 - #09] [2] USER HEAP - malloc() [User Side]
	// Write your code here, remove the panic and write your code
	//panic("malloc() is not implemented yet...!!");
	//return NULL;
	//Use sys_isUHeapPlacementStrategyFIRSTFIT() and	sys_isUHeapPlacementStrategyBESTFIT()
	//to check the current strategy
	cprintf("malloc: program enters the function\n");
	if(size<=DYN_ALLOC_MAX_BLOCK_SIZE){
		return alloc_block_FF(size);
	}
	cprintf("Print 1\n");
	uint32 limit=(uint32)sys_get_hard_limit_user();
	uint32 hard_limit= limit + PAGE_SIZE;
	uint32 user_Available_Pages = ((USER_HEAP_MAX - hard_limit) / PAGE_SIZE);
	size = ROUNDUP(size, PAGE_SIZE);
	uint32 requiredPages = (size / PAGE_SIZE);
	uint32 start_of_first_fit_block = 0;
	uint32 startIndex = (hard_limit - USER_HEAP_START)/PAGE_SIZE;
	uint32 pageCounter = 0;
	cprintf("Print 2\n");
	    if (requiredPages <= user_Available_Pages) {
	    	cprintf("Print 3\n");
	        for (uint32 i = startIndex; i < NUM_OF_UHEAP_PAGES; i++) {
	            if (user_heap_pages_arr[i] == 0)
	            {
	                pageCounter++;
	                if (pageCounter == 1) {
	                	start_of_first_fit_block = USER_HEAP_START + (i * PAGE_SIZE);//changed line

	                }
	            }
	            else {
	                pageCounter = 0;
	            }

	            if (pageCounter == requiredPages) {
	                break;
	            }
	        }

			if (pageCounter!=requiredPages)
			{
				cprintf("Malloc: Not enough consecutive free pages\n");
				return NULL;
			}
			cprintf("Print 4\n");
		sys_allocate_user_mem(start_of_first_fit_block, size);
		cprintf("Print 5\n");
		uint32 address=start_of_first_fit_block;
		for (uint32 i = 0; i < requiredPages; i++)
		{
			user_heap_pages_arr[((address - USER_HEAP_START) / PAGE_SIZE )] = requiredPages;
			address += PAGE_SIZE;
		}
		cprintf("Print 6\n");
		return (void*)start_of_first_fit_block;

	}
	else
	{
		cprintf("Malloc: no enough pages\n");
		return NULL;
	}

}


//=================================
//=================================
// [3] FREE SPACE FROM USER HEAP:
//=================================
void free(void* virtual_address)
{
	//TODO: [PROJECT'23.MS2 - #11] [2] USER HEAP - free() [User Side]
	// Write your code here, remove the panic and write your code
	//panic("free() is not implemented yet...!!");
	uint32 va = (uint32)virtual_address;
	uint32 limit=(uint32)sys_get_hard_limit_user();
	uint32 hard_limit= limit+PAGE_SIZE;
	if(va>=USER_HEAP_START && va<=hard_limit){
		free_block(virtual_address);
		return;
	}

	uint32 page_address = ROUNDDOWN(va, PAGE_SIZE);
	uint32 startIndex=(page_address-USER_HEAP_START)/PAGE_SIZE;

			if (user_heap_pages_arr[startIndex]!=0)
			{
				uint32 num_pages = user_heap_pages_arr[startIndex];


				for (uint32 j = 0; j < num_pages; j++)
				{
					user_heap_pages_arr[j] = 0;
				}

				sys_free_user_mem(va, num_pages * PAGE_SIZE);


//				alloced_pages[i] = alloced_pages[idx - 1];
//				idx--;

				return;

		}

}

//=================================
// [4] ALLOCATE SHARED VARIABLE:
//=================================
void* smalloc(char *sharedVarName, uint32 size, uint8 isWritable)
{
	//==============================================================
	//DON'T CHANGE THIS CODE========================================
	InitializeUHeap();
	if (size == 0) return NULL ;
	//==============================================================
	panic("smalloc() is not implemented yet...!!");
	return NULL;
}

//========================================
// [5] SHARE ON ALLOCATED SHARED VARIABLE:
//========================================
void* sget(int32 ownerEnvID, char *sharedVarName)
{
	//==============================================================
	//DON'T CHANGE THIS CODE========================================
	InitializeUHeap();
	//==============================================================
	// Write your code here, remove the panic and write your code
	panic("sget() is not implemented yet...!!");
	return NULL;
}


//==================================================================================//
//============================== BONUS FUNCTIONS ===================================//
//==================================================================================//

//=================================
// REALLOC USER SPACE:
//=================================
//	Attempts to resize the allocated space at "virtual_address" to "new_size" bytes,
//	possibly moving it in the heap.
//	If successful, returns the new virtual_address, in which case the old virtual_address must no longer be accessed.
//	On failure, returns a null pointer, and the old virtual_address remains valid.

//	A call with virtual_address = null is equivalent to malloc().
//	A call with new_size = zero is equivalent to free().

//  Hint: you may need to use the sys_move_user_mem(...)
//		which switches to the kernel mode, calls move_user_mem(...)
//		in "kern/mem/chunk_operations.c", then switch back to the user mode here
//	the move_user_mem() function is empty, make sure to implement it.
void *realloc(void *virtual_address, uint32 new_size)
{
	//==============================================================
	//DON'T CHANGE THIS CODE========================================
	InitializeUHeap();
	//==============================================================

	// Write your code here, remove the panic and write your code
	panic("realloc() is not implemented yet...!!");
	return NULL;

}


//=================================
// FREE SHARED VARIABLE:
//=================================
//	This function frees the shared variable at the given virtual_address
//	To do this, we need to switch to the kernel, free the pages AND "EMPTY" PAGE TABLES
//	from main memory then switch back to the user again.
//
//	use sys_freeSharedObject(...); which switches to the kernel mode,
//	calls freeSharedObject(...) in "shared_memory_manager.c", then switch back to the user mode here
//	the freeSharedObject() function is empty, make sure to implement it.

void sfree(void* virtual_address)
{
	// Write your code here, remove the panic and write your code
	panic("sfree() is not implemented yet...!!");
}


//==================================================================================//
//========================== MODIFICATION FUNCTIONS ================================//
//==================================================================================//

void expand(uint32 newSize)
{
	panic("Not Implemented");

}
void shrink(uint32 newSize)
{
	panic("Not Implemented");

}
void freeHeap(void* virtual_address)
{
	panic("Not Implemented");

}
