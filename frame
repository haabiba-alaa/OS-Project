struct FrameInfo {
	Page_LIST_entry_t prev_next_info;	/* free list link */

	// references is the count of pointers (usually in page table entries)
	// to this page, for frames allocated using allocate_frame.
	// frames allocated at boot time using memory_manager.c's
	// boot_allocate_space do not have valid reference count fields.

	uint16 references;
	uint32 va;
	struct Env *environment;
	unsigned char isBuffered;
	struct WorkingSetElement *element;
};


struct FrameInfo *ptr_frame_info;
uint32 physical_address = /* your physical address */;
printf("Given Physical Address: %u\n", physical_address);

ptr_frame_info = to_frame_info(physical_address);

if (ptr_frame_info != NULL) {
    printf("FrameInfo Retrieved\n");

    uint32 offset = physical_address & (PAGE_SIZE - 1);
    printf("Calculated Offset: %u\n", offset);

    uint32 virtual_address = ptr_frame_info->va + offset;
    printf("Final Virtual Address: %u\n", virtual_address);

    // Use virtual_address as needed
} else {
    printf("Failed to retrieve FrameInfo\n");
}


unsigned int kheap_virtual_address(unsigned int physical_address)
{
    uint32 frame_no = physical_address >> 12;
    uint32 offset = physical_address & 0x00000FFF;

    // Iterate over page directory
    for (int pd_index = 0; pd_index < PAGE_DIRECTORY_ENTRIES; pd_index++) {
        uint32* ptr_page_table = NULL;
        get_page_table(ptr_page_directory, pd_index << 22, &ptr_page_table);

        if (ptr_page_table != NULL) {
            // Iterate over page table entries
            for (int pt_index = 0; pt_index < PAGE_TABLE_ENTRIES; pt_index++) {
                uint32 table_entry = ptr_page_table[pt_index];
                int entry_frame_no = table_entry >> 12;
                if (entry_frame_no == frame_no) {
                    unsigned int virtual_address = ((pd_index << 22) | (pt_index << 12) | offset);
                    return virtual_address;
                }
            }
        }
    }

    // No mapping found
    return 0;
}


struct FrameInfo *ptr_frame_info;
uint32 physical_address = /* your physical address */;
printf("Given Physical Address: %u\n", physical_address);

ptr_frame_info = to_frame_info(physical_address);

if (ptr_frame_info != NULL) {
    printf("FrameInfo Retrieved\n");

    uint32 offset = physical_address & (PAGE_SIZE - 1);
    printf("Calculated Offset: %u\n", offset);

    uint32 virtual_address = ptr_frame_info->va + offset;
    printf("Final Virtual Address: %u\n", virtual_address);

    // Use virtual_address as needed
} else {
    printf("Failed to retrieve FrameInfo\n");
}


struct FrameInfo *ptr_frame_info;
uint32 physical_address = /* your physical address */;
printf("Given Physical Address: %u\n", physical_address);

ptr_frame_info = to_frame_info(physical_address);

if (ptr_frame_info != NULL) {
    printf("FrameInfo Retrieved\n");

    uint32 offset = physical_address & (PAGE_SIZE - 1);
    printf("Calculated Offset: %u\n", offset);

    uint32 virtual_address = ptr_frame_info->va + offset;
    printf("Final Virtual Address: %u\n", virtual_address);

    // Use virtual_address as needed
} else {
    printf("Failed to retrieve FrameInfo\n");
}




unsigned int kheap_virtual_address(unsigned int physical_address)
{
    uint32 frame_no = physical_address >> 12;
    uint32 offset = physical_address & 0x00000FFF;

    uint32* ptr_page_table = get_page_table_entry(ptr_page_directory, frame_no);

    if (ptr_page_table != NULL) {
        uint32 virtual_address = (ptr_page_table[PTX(frame_no)] << 12) | offset;
        return virtual_address;
    } else {
        return 0;
    }
}
