unsigned int kheap_virtual_address(unsigned int physical_address)
{
    uint32 frame_no = physical_address >> 12;

    uint32* ptr_page_table;
    int result = get_page_table(ptr_page_directory, frame_no, &ptr_page_table);

    printf("Given Physical Address: %u\n", physical_address);
    printf("Frame Number: %u\n", frame_no);

    if (result == TABLE_IN_MEMORY && ptr_page_table != NULL) {
        uint32 page_table_entry = ptr_page_table[PTX(frame_no)];
        uint32 offset = physical_address & 0x00000FFF;

        printf("Page Table Entry: %u\n", page_table_entry);
        printf("Offset within Page: %u\n", offset);

        uint32 virtual_address = (page_table_entry << 12) + offset;

        printf("Calculated Virtual Address: %u\n", virtual_address);

        return virtual_address;
    } else {
        printf("Page table not in memory or NULL\n");
        return 0;





PA = ffff000, retrievedVA = 0 expectedVA = f6000000
Wrong kheap_virtual_address

PA = ffff000, retrievedVA = 0 expectedVA = f6000000
Wrong kheap_virtual_address

unsigned int kheap_virtual_address(unsigned int physical_address)
{
    uint32 frame_no = physical_address >> 12;
    uint32* ptr_page_table;

    //cprintf("Given Physical Address: %u\n", physical_address);

    struct FrameInfo* frame_info;
    frame_info=to_frame_info(physical_address);

    if (frame_info != NULL) {
    	uint32 offset=physical_address &(PAGE_SIZE-1);
    	uint32 va=frame_info->va+offset;
    	//cprintf("Offset within Page: %u\n", offset);
    	//cprintf("Calculated Virtual Address: %u\n", va);
        return va;
    } else {
        return 0;
    }
}
