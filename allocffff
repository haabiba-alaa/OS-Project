void* alloc_block_FF(uint32 size) {
    if (size == 0) {
        return NULL;
    }
    if (!is_initialized)
    {
    uint32 required_size = size + sizeOfMetaData();
    uint32 da_start = (uint32)sbrk(required_size);
    //get new break since it's page aligned! thus, the size can be more than the required one
    uint32 da_break = (uint32)sbrk(0);
    initialize_dynamic_allocator(da_start, da_break - da_start);
    }
    //cprintf("line 129");
    struct BlockMetaData* currBlock = LIST_FIRST(&MYblock_list);

    LIST_FOREACH(currBlock, &MYblock_list) {
        if (currBlock->is_free && currBlock->size >= size + sizeOfMetaData()) {
            currBlock->is_free = 0;

            if (currBlock->size > size + sizeOfMetaData()) {
                // Split the block if it's larger
                struct BlockMetaData* newFreeBlock = (struct BlockMetaData*)((uint32)currBlock + sizeOfMetaData() + size);
                if(currBlock->size - size - sizeOfMetaData() > sizeOfMetaData()){
                	newFreeBlock->size = currBlock->size - size - sizeOfMetaData();
                	newFreeBlock->is_free = 1;
                	currBlock->size = size + sizeOfMetaData();
                	LIST_INSERT_AFTER(&MYblock_list, currBlock, newFreeBlock);
                }
             }


            return (void*)((uint32)currBlock + sizeOfMetaData());
        }
    }
    struct BlockMetaData* newAllocationNode = sbrk(size + sizeOfMetaData());

    	if (newAllocationNode == (void*)-1) {
    		return NULL;
    	}
    	else{
    	    	struct BlockMetaData* newBlock = (struct BlockMetaData*)((uint32)newAllocationNode+size + sizeOfMetaData());
    			newBlock->size = PAGE_SIZE-(size+sizeOfMetaData());
    		    newBlock->is_free = 1;
    	    	LIST_INSERT_TAIL(&MYblock_list,newAllocationNode);
    	    	newAllocationNode->is_free=0;
    	    	newAllocationNode->size=size + sizeOfMetaData();
    			LIST_INSERT_TAIL(&MYblock_list, newBlock);

    	      return (void*)((uint32)newAllocationNode + sizeOfMetaData());
    	 }
    	    return NULL; // Return NULL for the else case
    
